
ramp_generation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026cc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00034bf0  08002860  08002860  00003860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08037450  08037450  00039010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08037450  08037450  00039010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08037450  08037450  00039010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08037450  08037450  00038450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08037454  08037454  00038454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08037458  00039000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00039010  2**0
                  CONTENTS
 10 .bss          00000084  20000010  20000010  00039010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00039010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00039010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac63  00000000  00000000  00039040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a19  00000000  00000000  00043ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  000456c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000085d  00000000  00000000  000461a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f864  00000000  00000000  00046a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca7b  00000000  00000000  00066269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2fc7  00000000  00000000  00072ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135cab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d88  00000000  00000000  00135cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00138a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002848 	.word	0x08002848

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08002848 	.word	0x08002848

080001d4 <HAL_TIM_PeriodElapsedCallback>:
static void MX_DAC1_Init(void);
static void MX_TIM6_Init(void);

/* A cada “tic” do TIM6 (~360 Hz), manda a próxima amostra pro DAC */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a13      	ldr	r2, [pc, #76]	@ (8000230 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d11f      	bne.n	8000226 <HAL_TIM_PeriodElapsedCallback+0x52>
    uint16_t s = last_sample;
 80001e6:	4b13      	ldr	r3, [pc, #76]	@ (8000234 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80001e8:	881b      	ldrh	r3, [r3, #0]
 80001ea:	81fb      	strh	r3, [r7, #14]
    if (ECG5MIN_NSAMPLES > 0U) {
 80001ec:	4b12      	ldr	r3, [pc, #72]	@ (8000238 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d013      	beq.n	800021a <HAL_TIM_PeriodElapsedCallback+0x46>
      s = ecg5min[play_idx++];
 80001f2:	4b12      	ldr	r3, [pc, #72]	@ (800023c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	1c5a      	adds	r2, r3, #1
 80001f8:	4910      	ldr	r1, [pc, #64]	@ (800023c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80001fa:	600a      	str	r2, [r1, #0]
 80001fc:	4a10      	ldr	r2, [pc, #64]	@ (8000240 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80001fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000202:	81fb      	strh	r3, [r7, #14]
      if (play_idx >= ECG5MIN_NSAMPLES) play_idx = 0;  /* loop */
 8000204:	4b0d      	ldr	r3, [pc, #52]	@ (800023c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a0b      	ldr	r2, [pc, #44]	@ (8000238 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d302      	bcc.n	8000214 <HAL_TIM_PeriodElapsedCallback+0x40>
 800020e:	4b0b      	ldr	r3, [pc, #44]	@ (800023c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
      last_sample = s;
 8000214:	4a07      	ldr	r2, [pc, #28]	@ (8000234 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000216:	89fb      	ldrh	r3, [r7, #14]
 8000218:	8013      	strh	r3, [r2, #0]
    }
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, s);
 800021a:	89fb      	ldrh	r3, [r7, #14]
 800021c:	2200      	movs	r2, #0
 800021e:	2100      	movs	r1, #0
 8000220:	4808      	ldr	r0, [pc, #32]	@ (8000244 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000222:	f000 fb9a 	bl	800095a <HAL_DAC_SetValue>
  }
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40001000 	.word	0x40001000
 8000234:	20000000 	.word	0x20000000
 8000238:	0001a5e0 	.word	0x0001a5e0
 800023c:	2000008c 	.word	0x2000008c
 8000240:	08002860 	.word	0x08002860
 8000244:	2000002c 	.word	0x2000002c

08000248 <main>:

int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  HAL_Init();
 800024c:	f000 f9e2 	bl	8000614 <HAL_Init>
  SystemClock_Config();
 8000250:	f000 f81a 	bl	8000288 <SystemClock_Config>

  MX_GPIO_Init();   /* configura PA4 como analógico */
 8000254:	f000 f84a 	bl	80002ec <MX_GPIO_Init>
  MX_DAC1_Init();   /* liga clock do DAC e configura CH1 */
 8000258:	f000 f870 	bl	800033c <MX_DAC1_Init>
  MX_TIM6_Init();   /* ~360 Hz + NVIC */
 800025c:	f000 f89c 	bl	8000398 <MX_TIM6_Init>

  /* TESTE: force 2048 antes do timer — se PA4 estiver ok você mede ~1,65 V*/
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000260:	2100      	movs	r1, #0
 8000262:	4807      	ldr	r0, [pc, #28]	@ (8000280 <main+0x38>)
 8000264:	f000 fb9e 	bl	80009a4 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000268:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800026c:	2200      	movs	r2, #0
 800026e:	2100      	movs	r1, #0
 8000270:	4803      	ldr	r0, [pc, #12]	@ (8000280 <main+0x38>)
 8000272:	f000 fb72 	bl	800095a <HAL_DAC_SetValue>

  /* inicia temporizador com interrupção (passa a tocar o array) */
  HAL_TIM_Base_Start_IT(&htim6);
 8000276:	4803      	ldr	r0, [pc, #12]	@ (8000284 <main+0x3c>)
 8000278:	f002 f858 	bl	800232c <HAL_TIM_Base_Start_IT>

  while (1) { /* tudo acontece na IRQ */ }
 800027c:	bf00      	nop
 800027e:	e7fd      	b.n	800027c <main+0x34>
 8000280:	2000002c 	.word	0x2000002c
 8000284:	20000040 	.word	0x20000040

08000288 <SystemClock_Config>:
}

/* ===== Clock: HSI 8 MHz, sem PLL ===== */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b090      	sub	sp, #64	@ 0x40
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	2228      	movs	r2, #40	@ 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f002 faaa 	bl	80027f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 80002aa:	2302      	movs	r3, #2
 80002ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80002ae:	2301      	movs	r3, #1
 80002b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b2:	2310      	movs	r3, #16
 80002b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_NONE;
 80002b6:	2300      	movs	r3, #0
 80002b8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80002ba:	f107 0318 	add.w	r3, r7, #24
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fdf6 	bl	8000eb0 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	607b      	str	r3, [r7, #4]
                                   |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSI;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 fe0b 	bl	8001ef8 <HAL_RCC_ClockConfig>
}
 80002e2:	bf00      	nop
 80002e4:	3740      	adds	r7, #64	@ 0x40
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <MX_GPIO_Init>:

/* ===== GPIO: PA4 como ANALOG (DAC OUT1) ===== */
static void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f2:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <MX_GPIO_Init+0x4c>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a10      	ldr	r2, [pc, #64]	@ (8000338 <MX_GPIO_Init+0x4c>)
 80002f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <MX_GPIO_Init+0x4c>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000306:	603b      	str	r3, [r7, #0]
 8000308:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef g = {0};
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
  g.Pin  = GPIO_PIN_4;              /* PA4 */
 8000318:	2310      	movs	r3, #16
 800031a:	607b      	str	r3, [r7, #4]
  g.Mode = GPIO_MODE_ANALOG;        /* *** IMPORTANTE *** */
 800031c:	2303      	movs	r3, #3
 800031e:	60bb      	str	r3, [r7, #8]
  g.Pull = GPIO_NOPULL;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &g);
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4619      	mov	r1, r3
 8000328:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800032c:	f000 fc36 	bl	8000b9c <HAL_GPIO_Init>
}
 8000330:	bf00      	nop
 8000332:	3718      	adds	r7, #24
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40021000 	.word	0x40021000

0800033c <MX_DAC1_Init>:

/* ===== DAC1 CH1 (PA4), trigger NONE ===== */
static void MX_DAC1_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
  __HAL_RCC_DAC1_CLK_ENABLE();      /* *** IMPORTANTE: liga clock do DAC *** */
 8000342:	4b12      	ldr	r3, [pc, #72]	@ (800038c <MX_DAC1_Init+0x50>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	4a11      	ldr	r2, [pc, #68]	@ (800038c <MX_DAC1_Init+0x50>)
 8000348:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800034c:	61d3      	str	r3, [r2, #28]
 800034e:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <MX_DAC1_Init+0x50>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]

  DAC_ChannelConfTypeDef sConfig = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
  hdac1.Instance = DAC1;
 8000364:	4b0a      	ldr	r3, [pc, #40]	@ (8000390 <MX_DAC1_Init+0x54>)
 8000366:	4a0b      	ldr	r2, [pc, #44]	@ (8000394 <MX_DAC1_Init+0x58>)
 8000368:	601a      	str	r2, [r3, #0]
  HAL_DAC_Init(&hdac1);
 800036a:	4809      	ldr	r0, [pc, #36]	@ (8000390 <MX_DAC1_Init+0x54>)
 800036c:	f000 fac9 	bl	8000902 <HAL_DAC_Init>

  sConfig.DAC_Trigger      = DAC_TRIGGER_NONE;     /* vamos escrever na IRQ do TIM6 */
 8000370:	2300      	movs	r3, #0
 8000372:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	60bb      	str	r3, [r7, #8]
  HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1);
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2200      	movs	r2, #0
 800037c:	4619      	mov	r1, r3
 800037e:	4804      	ldr	r0, [pc, #16]	@ (8000390 <MX_DAC1_Init+0x54>)
 8000380:	f000 fbb5 	bl	8000aee <HAL_DAC_ConfigChannel>
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40021000 	.word	0x40021000
 8000390:	2000002c 	.word	0x2000002c
 8000394:	40007400 	.word	0x40007400

08000398 <MX_TIM6_Init>:
 * 8 MHz/(PSC+1)=100 kHz com PSC=79
 * f = 100000 / (ARR+1)
 * ARR=277 → ~359,712 Hz (erro ~0,08%)
 */
static void MX_TIM6_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
  __HAL_RCC_TIM6_CLK_ENABLE();
 800039e:	4b15      	ldr	r3, [pc, #84]	@ (80003f4 <MX_TIM6_Init+0x5c>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	4a14      	ldr	r2, [pc, #80]	@ (80003f4 <MX_TIM6_Init+0x5c>)
 80003a4:	f043 0310 	orr.w	r3, r3, #16
 80003a8:	61d3      	str	r3, [r2, #28]
 80003aa:	4b12      	ldr	r3, [pc, #72]	@ (80003f4 <MX_TIM6_Init+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	f003 0310 	and.w	r3, r3, #16
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  htim6.Instance               = TIM6;
 80003b6:	4b10      	ldr	r3, [pc, #64]	@ (80003f8 <MX_TIM6_Init+0x60>)
 80003b8:	4a10      	ldr	r2, [pc, #64]	@ (80003fc <MX_TIM6_Init+0x64>)
 80003ba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler         = 79;
 80003bc:	4b0e      	ldr	r3, [pc, #56]	@ (80003f8 <MX_TIM6_Init+0x60>)
 80003be:	224f      	movs	r2, #79	@ 0x4f
 80003c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80003c2:	4b0d      	ldr	r3, [pc, #52]	@ (80003f8 <MX_TIM6_Init+0x60>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period            = 277;
 80003c8:	4b0b      	ldr	r3, [pc, #44]	@ (80003f8 <MX_TIM6_Init+0x60>)
 80003ca:	f240 1215 	movw	r2, #277	@ 0x115
 80003ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d0:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <MX_TIM6_Init+0x60>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
  HAL_TIM_Base_Init(&htim6);
 80003d6:	4808      	ldr	r0, [pc, #32]	@ (80003f8 <MX_TIM6_Init+0x60>)
 80003d8:	f001 ff50 	bl	800227c <HAL_TIM_Base_Init>

  /* NVIC — garante que a IRQ está habilitada */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80003dc:	2200      	movs	r2, #0
 80003de:	2101      	movs	r1, #1
 80003e0:	2036      	movs	r0, #54	@ 0x36
 80003e2:	f000 fa58 	bl	8000896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80003e6:	2036      	movs	r0, #54	@ 0x36
 80003e8:	f000 fa71 	bl	80008ce <HAL_NVIC_EnableIRQ>
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40021000 	.word	0x40021000
 80003f8:	20000040 	.word	0x20000040
 80003fc:	40001000 	.word	0x40001000

08000400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000406:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <HAL_MspInit+0x44>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	4a0e      	ldr	r2, [pc, #56]	@ (8000444 <HAL_MspInit+0x44>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6193      	str	r3, [r2, #24]
 8000412:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <HAL_MspInit+0x44>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <HAL_MspInit+0x44>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	4a08      	ldr	r2, [pc, #32]	@ (8000444 <HAL_MspInit+0x44>)
 8000424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000428:	61d3      	str	r3, [r2, #28]
 800042a:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <HAL_MspInit+0x44>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	@ 0x28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a19      	ldr	r2, [pc, #100]	@ (80004cc <HAL_DAC_MspInit+0x84>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d12c      	bne.n	80004c4 <HAL_DAC_MspInit+0x7c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800046a:	4b19      	ldr	r3, [pc, #100]	@ (80004d0 <HAL_DAC_MspInit+0x88>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a18      	ldr	r2, [pc, #96]	@ (80004d0 <HAL_DAC_MspInit+0x88>)
 8000470:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <HAL_DAC_MspInit+0x88>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800047e:	613b      	str	r3, [r7, #16]
 8000480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b13      	ldr	r3, [pc, #76]	@ (80004d0 <HAL_DAC_MspInit+0x88>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a12      	ldr	r2, [pc, #72]	@ (80004d0 <HAL_DAC_MspInit+0x88>)
 8000488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b10      	ldr	r3, [pc, #64]	@ (80004d0 <HAL_DAC_MspInit+0x88>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800049a:	2310      	movs	r3, #16
 800049c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800049e:	2303      	movs	r3, #3
 80004a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	4619      	mov	r1, r3
 80004ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b0:	f000 fb74 	bl	8000b9c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2100      	movs	r1, #0
 80004b8:	2036      	movs	r0, #54	@ 0x36
 80004ba:	f000 f9ec 	bl	8000896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80004be:	2036      	movs	r0, #54	@ 0x36
 80004c0:	f000 fa05 	bl	80008ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 80004c4:	bf00      	nop
 80004c6:	3728      	adds	r7, #40	@ 0x28
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40007400 	.word	0x40007400
 80004d0:	40021000 	.word	0x40021000

080004d4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000518 <HAL_TIM_Base_MspInit+0x44>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d113      	bne.n	800050e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80004e6:	4b0d      	ldr	r3, [pc, #52]	@ (800051c <HAL_TIM_Base_MspInit+0x48>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	4a0c      	ldr	r2, [pc, #48]	@ (800051c <HAL_TIM_Base_MspInit+0x48>)
 80004ec:	f043 0310 	orr.w	r3, r3, #16
 80004f0:	61d3      	str	r3, [r2, #28]
 80004f2:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <HAL_TIM_Base_MspInit+0x48>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	f003 0310 	and.w	r3, r3, #16
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	2036      	movs	r0, #54	@ 0x36
 8000504:	f000 f9c7 	bl	8000896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000508:	2036      	movs	r0, #54	@ 0x36
 800050a:	f000 f9e0 	bl	80008ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40001000 	.word	0x40001000
 800051c:	40021000 	.word	0x40021000

08000520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <NMI_Handler+0x4>

08000528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <HardFault_Handler+0x4>

08000530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <MemManage_Handler+0x4>

08000538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <BusFault_Handler+0x4>

08000540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <UsageFault_Handler+0x4>

08000548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000576:	f000 f893 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000584:	4803      	ldr	r0, [pc, #12]	@ (8000594 <TIM6_DAC_IRQHandler+0x14>)
 8000586:	f001 ff41 	bl	800240c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800058a:	4803      	ldr	r0, [pc, #12]	@ (8000598 <TIM6_DAC_IRQHandler+0x18>)
 800058c:	f000 fa55 	bl	8000a3a <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000040 	.word	0x20000040
 8000598:	2000002c 	.word	0x2000002c

0800059c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800059c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a0:	f000 f826 	bl	80005f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a6:	490d      	ldr	r1, [pc, #52]	@ (80005dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a8:	4a0d      	ldr	r2, [pc, #52]	@ (80005e0 <LoopForever+0xe>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005bc:	4c0a      	ldr	r4, [pc, #40]	@ (80005e8 <LoopForever+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ca:	f002 f919 	bl	8002800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ce:	f7ff fe3b 	bl	8000248 <main>

080005d2 <LoopForever>:

LoopForever:
    b LoopForever
 80005d2:	e7fe      	b.n	80005d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80005e0:	08037458 	.word	0x08037458
  ldr r2, =_sbss
 80005e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80005e8:	20000094 	.word	0x20000094

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>
	...

080005f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <SystemInit+0x20>)
 80005f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005fa:	4a05      	ldr	r2, [pc, #20]	@ (8000610 <SystemInit+0x20>)
 80005fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <HAL_Init+0x28>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a07      	ldr	r2, [pc, #28]	@ (800063c <HAL_Init+0x28>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f92b 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	200f      	movs	r0, #15
 800062c:	f000 f808 	bl	8000640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000630:	f7ff fee6 	bl	8000400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <HAL_InitTick+0x54>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <HAL_InitTick+0x58>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f943 	bl	80008ea <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e00e      	b.n	800068c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d80a      	bhi.n	800068a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f04f 30ff 	mov.w	r0, #4294967295
 800067c:	f000 f90b 	bl	8000896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	4a06      	ldr	r2, [pc, #24]	@ (800069c <HAL_InitTick+0x5c>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004
 8000698:	2000000c 	.word	0x2000000c
 800069c:	20000008 	.word	0x20000008

080006a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <HAL_IncTick+0x20>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <HAL_IncTick+0x24>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <HAL_IncTick+0x24>)
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	2000000c 	.word	0x2000000c
 80006c4:	20000090 	.word	0x20000090

080006c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80006cc:	4b03      	ldr	r3, [pc, #12]	@ (80006dc <HAL_GetTick+0x14>)
 80006ce:	681b      	ldr	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000090 	.word	0x20000090

080006e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006fc:	4013      	ands	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800070c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000712:	4a04      	ldr	r2, [pc, #16]	@ (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	60d3      	str	r3, [r2, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <__NVIC_GetPriorityGrouping+0x18>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	f003 0307 	and.w	r3, r3, #7
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	db0b      	blt.n	800076e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 021f 	and.w	r2, r3, #31
 800075c:	4907      	ldr	r1, [pc, #28]	@ (800077c <__NVIC_EnableIRQ+0x38>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	095b      	lsrs	r3, r3, #5
 8000764:	2001      	movs	r0, #1
 8000766:	fa00 f202 	lsl.w	r2, r0, r2
 800076a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e100 	.word	0xe000e100

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	@ (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	@ (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	@ 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	@ 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	210f      	movs	r1, #15
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f7ff ff8e 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	@ (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	@ (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff29 	bl	80006e0 <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff3e 	bl	8000728 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff8e 	bl	80007d4 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5d 	bl	8000780 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff31 	bl	8000744 <__NVIC_EnableIRQ>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffa2 	bl	800083c <SysTick_Config>
 80008f8:	4603      	mov	r3, r0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d101      	bne.n	8000914 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	e014      	b.n	800093e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	791b      	ldrb	r3, [r3, #4]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d105      	bne.n	800092a <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fd8f 	bl	8000448 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2202      	movs	r2, #2
 800092e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2201      	movs	r2, #1
 800093a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800095a:	b480      	push	{r7}
 800095c:	b087      	sub	sp, #28
 800095e:	af00      	add	r7, sp, #0
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d105      	bne.n	8000984 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	3308      	adds	r3, #8
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	e004      	b.n	800098e <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	3314      	adds	r3, #20
 800098c:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	461a      	mov	r2, r3
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	371c      	adds	r7, #28
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	795b      	ldrb	r3, [r3, #5]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d101      	bne.n	80009ba <HAL_DAC_Start+0x16>
 80009b6:	2302      	movs	r3, #2
 80009b8:	e039      	b.n	8000a2e <HAL_DAC_Start+0x8a>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2201      	movs	r2, #1
 80009be:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2202      	movs	r2, #2
 80009c4:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	6819      	ldr	r1, [r3, #0]
 80009cc:	2201      	movs	r2, #1
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	409a      	lsls	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	430a      	orrs	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d10f      	bne.n	8000a00 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80009ea:	2b3c      	cmp	r3, #60	@ 0x3c
 80009ec:	d118      	bne.n	8000a20 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f042 0201 	orr.w	r2, r2, #1
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	e00f      	b.n	8000a20 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000a0a:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 8000a0e:	d107      	bne.n	8000a20 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	685a      	ldr	r2, [r3, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f042 0202 	orr.w	r2, r2, #2
 8000a1e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2201      	movs	r2, #1
 8000a24:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a50:	d120      	bne.n	8000a94 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a60:	d118      	bne.n	8000a94 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2204      	movs	r2, #4
 8000a66:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	691b      	ldr	r3, [r3, #16]
 8000a6c:	f043 0201 	orr.w	r2, r3, #1
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a7c:	635a      	str	r2, [r3, #52]	@ 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000a8c:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ff59 	bl	8000946 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000a9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000aa2:	d120      	bne.n	8000ae6 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ab2:	d118      	bne.n	8000ae6 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	f043 0202 	orr.w	r2, r3, #2
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000ace:	635a      	str	r2, [r3, #52]	@ 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8000ade:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f000 f851 	bl	8000b88 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b087      	sub	sp, #28
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	795b      	ldrb	r3, [r3, #5]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d101      	bne.n	8000b0e <HAL_DAC_ConfigChannel+0x20>
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	e036      	b.n	8000b7c <HAL_DAC_ConfigChannel+0x8e>
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2201      	movs	r2, #1
 8000b12:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2202      	movs	r2, #2
 8000b18:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000b22:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	4013      	ands	r3, r2
 8000b32:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6819      	ldr	r1, [r3, #0]
 8000b5c:	22c0      	movs	r2, #192	@ 0xc0
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	43da      	mvns	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	400a      	ands	r2, r1
 8000b6c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2201      	movs	r2, #1
 8000b72:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2200      	movs	r2, #0
 8000b78:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	371c      	adds	r7, #28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b087      	sub	sp, #28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000baa:	e160      	b.n	8000e6e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 8152 	beq.w	8000e68 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d005      	beq.n	8000bdc <HAL_GPIO_Init+0x40>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d130      	bne.n	8000c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2203      	movs	r2, #3
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c12:	2201      	movs	r2, #1
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	f003 0201 	and.w	r2, r3, #1
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d017      	beq.n	8000c7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	2203      	movs	r2, #3
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d123      	bne.n	8000cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	691a      	ldr	r2, [r3, #16]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	08da      	lsrs	r2, r3, #3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3208      	adds	r2, #8
 8000cc8:	6939      	ldr	r1, [r7, #16]
 8000cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0203 	and.w	r2, r3, #3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80ac 	beq.w	8000e68 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d10:	4b5e      	ldr	r3, [pc, #376]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a5d      	ldr	r2, [pc, #372]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b5b      	ldr	r3, [pc, #364]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d28:	4a59      	ldr	r2, [pc, #356]	@ (8000e90 <HAL_GPIO_Init+0x2f4>)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d52:	d025      	beq.n	8000da0 <HAL_GPIO_Init+0x204>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a4f      	ldr	r2, [pc, #316]	@ (8000e94 <HAL_GPIO_Init+0x2f8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d01f      	beq.n	8000d9c <HAL_GPIO_Init+0x200>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a4e      	ldr	r2, [pc, #312]	@ (8000e98 <HAL_GPIO_Init+0x2fc>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d019      	beq.n	8000d98 <HAL_GPIO_Init+0x1fc>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a4d      	ldr	r2, [pc, #308]	@ (8000e9c <HAL_GPIO_Init+0x300>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d013      	beq.n	8000d94 <HAL_GPIO_Init+0x1f8>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a4c      	ldr	r2, [pc, #304]	@ (8000ea0 <HAL_GPIO_Init+0x304>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d00d      	beq.n	8000d90 <HAL_GPIO_Init+0x1f4>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a4b      	ldr	r2, [pc, #300]	@ (8000ea4 <HAL_GPIO_Init+0x308>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d007      	beq.n	8000d8c <HAL_GPIO_Init+0x1f0>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a4a      	ldr	r2, [pc, #296]	@ (8000ea8 <HAL_GPIO_Init+0x30c>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d101      	bne.n	8000d88 <HAL_GPIO_Init+0x1ec>
 8000d84:	2306      	movs	r3, #6
 8000d86:	e00c      	b.n	8000da2 <HAL_GPIO_Init+0x206>
 8000d88:	2307      	movs	r3, #7
 8000d8a:	e00a      	b.n	8000da2 <HAL_GPIO_Init+0x206>
 8000d8c:	2305      	movs	r3, #5
 8000d8e:	e008      	b.n	8000da2 <HAL_GPIO_Init+0x206>
 8000d90:	2304      	movs	r3, #4
 8000d92:	e006      	b.n	8000da2 <HAL_GPIO_Init+0x206>
 8000d94:	2303      	movs	r3, #3
 8000d96:	e004      	b.n	8000da2 <HAL_GPIO_Init+0x206>
 8000d98:	2302      	movs	r3, #2
 8000d9a:	e002      	b.n	8000da2 <HAL_GPIO_Init+0x206>
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <HAL_GPIO_Init+0x206>
 8000da0:	2300      	movs	r3, #0
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	f002 0203 	and.w	r2, r2, #3
 8000da8:	0092      	lsls	r2, r2, #2
 8000daa:	4093      	lsls	r3, r2
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000db2:	4937      	ldr	r1, [pc, #220]	@ (8000e90 <HAL_GPIO_Init+0x2f4>)
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	3302      	adds	r3, #2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dc0:	4b3a      	ldr	r3, [pc, #232]	@ (8000eac <HAL_GPIO_Init+0x310>)
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000de4:	4a31      	ldr	r2, [pc, #196]	@ (8000eac <HAL_GPIO_Init+0x310>)
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dea:	4b30      	ldr	r3, [pc, #192]	@ (8000eac <HAL_GPIO_Init+0x310>)
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e0e:	4a27      	ldr	r2, [pc, #156]	@ (8000eac <HAL_GPIO_Init+0x310>)
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e14:	4b25      	ldr	r3, [pc, #148]	@ (8000eac <HAL_GPIO_Init+0x310>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e38:	4a1c      	ldr	r2, [pc, #112]	@ (8000eac <HAL_GPIO_Init+0x310>)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <HAL_GPIO_Init+0x310>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e62:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <HAL_GPIO_Init+0x310>)
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	fa22 f303 	lsr.w	r3, r2, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f47f ae97 	bne.w	8000bac <HAL_GPIO_Init+0x10>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
 8000e82:	371c      	adds	r7, #28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010000 	.word	0x40010000
 8000e94:	48000400 	.word	0x48000400
 8000e98:	48000800 	.word	0x48000800
 8000e9c:	48000c00 	.word	0x48000c00
 8000ea0:	48001000 	.word	0x48001000
 8000ea4:	48001400 	.word	0x48001400
 8000ea8:	48001800 	.word	0x48001800
 8000eac:	40010400 	.word	0x40010400

08000eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ebc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ec0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ec6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f001 b80a 	b.w	8001eea <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000eda:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 8161 	beq.w	80011ae <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eec:	4bae      	ldr	r3, [pc, #696]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d00c      	beq.n	8000f12 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef8:	4bab      	ldr	r3, [pc, #684]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 030c 	and.w	r3, r3, #12
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d157      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x104>
 8000f04:	4ba8      	ldr	r3, [pc, #672]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f10:	d150      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x104>
 8000f12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f16:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000f1e:	fa93 f3a3 	rbit	r3, r3
 8000f22:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f26:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2a:	fab3 f383 	clz	r3, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f32:	d802      	bhi.n	8000f3a <HAL_RCC_OscConfig+0x8a>
 8000f34:	4b9c      	ldr	r3, [pc, #624]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	e015      	b.n	8000f66 <HAL_RCC_OscConfig+0xb6>
 8000f3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f3e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000f46:	fa93 f3a3 	rbit	r3, r3
 8000f4a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000f4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f52:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000f56:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000f62:	4b91      	ldr	r3, [pc, #580]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8000f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f66:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f6a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000f6e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000f72:	fa92 f2a2 	rbit	r2, r2
 8000f76:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000f7a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000f7e:	fab2 f282 	clz	r2, r2
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	f042 0220 	orr.w	r2, r2, #32
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	f002 021f 	and.w	r2, r2, #31
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f202 	lsl.w	r2, r1, r2
 8000f94:	4013      	ands	r3, r2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8108 	beq.w	80011ac <HAL_RCC_OscConfig+0x2fc>
 8000f9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fa0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f040 80ff 	bne.w	80011ac <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f000 bf9b 	b.w	8001eea <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fc4:	d106      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x124>
 8000fc6:	4b78      	ldr	r3, [pc, #480]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a77      	ldr	r2, [pc, #476]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e036      	b.n	8001042 <HAL_RCC_OscConfig+0x192>
 8000fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fd8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10c      	bne.n	8000ffe <HAL_RCC_OscConfig+0x14e>
 8000fe4:	4b70      	ldr	r3, [pc, #448]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a6f      	ldr	r2, [pc, #444]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8000fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b6d      	ldr	r3, [pc, #436]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a6c      	ldr	r2, [pc, #432]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8000ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	e021      	b.n	8001042 <HAL_RCC_OscConfig+0x192>
 8000ffe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001002:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800100e:	d10c      	bne.n	800102a <HAL_RCC_OscConfig+0x17a>
 8001010:	4b65      	ldr	r3, [pc, #404]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a64      	ldr	r2, [pc, #400]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8001016:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b62      	ldr	r3, [pc, #392]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a61      	ldr	r2, [pc, #388]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8001022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e00b      	b.n	8001042 <HAL_RCC_OscConfig+0x192>
 800102a:	4b5f      	ldr	r3, [pc, #380]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a5e      	ldr	r2, [pc, #376]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8001030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4b5c      	ldr	r3, [pc, #368]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a5b      	ldr	r2, [pc, #364]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 800103c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001040:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001042:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001046:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d054      	beq.n	80010fc <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001052:	f7ff fb39 	bl	80006c8 <HAL_GetTick>
 8001056:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	e00a      	b.n	8001072 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fb34 	bl	80006c8 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b64      	cmp	r3, #100	@ 0x64
 800106a:	d902      	bls.n	8001072 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	f000 bf3c 	b.w	8001eea <HAL_RCC_OscConfig+0x103a>
 8001072:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001076:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001086:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108a:	fab3 f383 	clz	r3, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b3f      	cmp	r3, #63	@ 0x3f
 8001092:	d802      	bhi.n	800109a <HAL_RCC_OscConfig+0x1ea>
 8001094:	4b44      	ldr	r3, [pc, #272]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	e015      	b.n	80010c6 <HAL_RCC_OscConfig+0x216>
 800109a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800109e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80010a6:	fa93 f3a3 	rbit	r3, r3
 80010aa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80010ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010b2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80010b6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80010c2:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 80010c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010ca:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80010ce:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80010d2:	fa92 f2a2 	rbit	r2, r2
 80010d6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80010da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80010de:	fab2 f282 	clz	r2, r2
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	f042 0220 	orr.w	r2, r2, #32
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	f002 021f 	and.w	r2, r2, #31
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f202 	lsl.w	r2, r1, r2
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0b0      	beq.n	800105c <HAL_RCC_OscConfig+0x1ac>
 80010fa:	e058      	b.n	80011ae <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fae4 	bl	80006c8 <HAL_GetTick>
 8001100:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001104:	e00a      	b.n	800111c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001106:	f7ff fadf 	bl	80006c8 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b64      	cmp	r3, #100	@ 0x64
 8001114:	d902      	bls.n	800111c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	f000 bee7 	b.w	8001eea <HAL_RCC_OscConfig+0x103a>
 800111c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001120:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001124:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001128:	fa93 f3a3 	rbit	r3, r3
 800112c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001130:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001134:	fab3 f383 	clz	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b3f      	cmp	r3, #63	@ 0x3f
 800113c:	d802      	bhi.n	8001144 <HAL_RCC_OscConfig+0x294>
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	e015      	b.n	8001170 <HAL_RCC_OscConfig+0x2c0>
 8001144:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001148:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001158:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800115c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001160:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001164:	fa93 f3a3 	rbit	r3, r3
 8001168:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800116c:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_RCC_OscConfig+0x2f8>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001170:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001174:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001178:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800117c:	fa92 f2a2 	rbit	r2, r2
 8001180:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001184:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001188:	fab2 f282 	clz	r2, r2
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	f042 0220 	orr.w	r2, r2, #32
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	f002 021f 	and.w	r2, r2, #31
 8001198:	2101      	movs	r1, #1
 800119a:	fa01 f202 	lsl.w	r2, r1, r2
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1b0      	bne.n	8001106 <HAL_RCC_OscConfig+0x256>
 80011a4:	e003      	b.n	80011ae <HAL_RCC_OscConfig+0x2fe>
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 816d 	beq.w	800149e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011c4:	4bcd      	ldr	r3, [pc, #820]	@ (80014fc <HAL_RCC_OscConfig+0x64c>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 030c 	and.w	r3, r3, #12
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00c      	beq.n	80011ea <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011d0:	4bca      	ldr	r3, [pc, #808]	@ (80014fc <HAL_RCC_OscConfig+0x64c>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d16e      	bne.n	80012ba <HAL_RCC_OscConfig+0x40a>
 80011dc:	4bc7      	ldr	r3, [pc, #796]	@ (80014fc <HAL_RCC_OscConfig+0x64c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80011e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80011e8:	d167      	bne.n	80012ba <HAL_RCC_OscConfig+0x40a>
 80011ea:	2302      	movs	r3, #2
 80011ec:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011f4:	fa93 f3a3 	rbit	r3, r3
 80011f8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80011fc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001200:	fab3 f383 	clz	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b3f      	cmp	r3, #63	@ 0x3f
 8001208:	d802      	bhi.n	8001210 <HAL_RCC_OscConfig+0x360>
 800120a:	4bbc      	ldr	r3, [pc, #752]	@ (80014fc <HAL_RCC_OscConfig+0x64c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	e013      	b.n	8001238 <HAL_RCC_OscConfig+0x388>
 8001210:	2302      	movs	r3, #2
 8001212:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001228:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800122c:	fa93 f3a3 	rbit	r3, r3
 8001230:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001234:	4bb1      	ldr	r3, [pc, #708]	@ (80014fc <HAL_RCC_OscConfig+0x64c>)
 8001236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001238:	2202      	movs	r2, #2
 800123a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800123e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001242:	fa92 f2a2 	rbit	r2, r2
 8001246:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800124a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800124e:	fab2 f282 	clz	r2, r2
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	f042 0220 	orr.w	r2, r2, #32
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	f002 021f 	and.w	r2, r2, #31
 800125e:	2101      	movs	r1, #1
 8001260:	fa01 f202 	lsl.w	r2, r1, r2
 8001264:	4013      	ands	r3, r2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00a      	beq.n	8001280 <HAL_RCC_OscConfig+0x3d0>
 800126a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800126e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d002      	beq.n	8001280 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	f000 be35 	b.w	8001eea <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001280:	4b9e      	ldr	r3, [pc, #632]	@ (80014fc <HAL_RCC_OscConfig+0x64c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800128c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	21f8      	movs	r1, #248	@ 0xf8
 8001296:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800129e:	fa91 f1a1 	rbit	r1, r1
 80012a2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80012a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80012aa:	fab1 f181 	clz	r1, r1
 80012ae:	b2c9      	uxtb	r1, r1
 80012b0:	408b      	lsls	r3, r1
 80012b2:	4992      	ldr	r1, [pc, #584]	@ (80014fc <HAL_RCC_OscConfig+0x64c>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b8:	e0f1      	b.n	800149e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 8083 	beq.w	80013d2 <HAL_RCC_OscConfig+0x522>
 80012cc:	2301      	movs	r3, #1
 80012ce:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80012d6:	fa93 f3a3 	rbit	r3, r3
 80012da:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80012de:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e2:	fab3 f383 	clz	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80012ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	461a      	mov	r2, r3
 80012f4:	2301      	movs	r3, #1
 80012f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff f9e6 	bl	80006c8 <HAL_GetTick>
 80012fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff f9e1 	bl	80006c8 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d902      	bls.n	8001318 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	f000 bde9 	b.w	8001eea <HAL_RCC_OscConfig+0x103a>
 8001318:	2302      	movs	r3, #2
 800131a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001322:	fa93 f3a3 	rbit	r3, r3
 8001326:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800132a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132e:	fab3 f383 	clz	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b3f      	cmp	r3, #63	@ 0x3f
 8001336:	d802      	bhi.n	800133e <HAL_RCC_OscConfig+0x48e>
 8001338:	4b70      	ldr	r3, [pc, #448]	@ (80014fc <HAL_RCC_OscConfig+0x64c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	e013      	b.n	8001366 <HAL_RCC_OscConfig+0x4b6>
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001344:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001348:	fa93 f3a3 	rbit	r3, r3
 800134c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001350:	2302      	movs	r3, #2
 8001352:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001356:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001362:	4b66      	ldr	r3, [pc, #408]	@ (80014fc <HAL_RCC_OscConfig+0x64c>)
 8001364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001366:	2202      	movs	r2, #2
 8001368:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800136c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001370:	fa92 f2a2 	rbit	r2, r2
 8001374:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001378:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800137c:	fab2 f282 	clz	r2, r2
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	f042 0220 	orr.w	r2, r2, #32
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	f002 021f 	and.w	r2, r2, #31
 800138c:	2101      	movs	r1, #1
 800138e:	fa01 f202 	lsl.w	r2, r1, r2
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0b4      	beq.n	8001302 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001398:	4b58      	ldr	r3, [pc, #352]	@ (80014fc <HAL_RCC_OscConfig+0x64c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	21f8      	movs	r1, #248	@ 0xf8
 80013ae:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80013b6:	fa91 f1a1 	rbit	r1, r1
 80013ba:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80013be:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80013c2:	fab1 f181 	clz	r1, r1
 80013c6:	b2c9      	uxtb	r1, r1
 80013c8:	408b      	lsls	r3, r1
 80013ca:	494c      	ldr	r1, [pc, #304]	@ (80014fc <HAL_RCC_OscConfig+0x64c>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
 80013d0:	e065      	b.n	800149e <HAL_RCC_OscConfig+0x5ee>
 80013d2:	2301      	movs	r3, #1
 80013d4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80013dc:	fa93 f3a3 	rbit	r3, r3
 80013e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80013e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e8:	fab3 f383 	clz	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80013f2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	461a      	mov	r2, r3
 80013fa:	2300      	movs	r3, #0
 80013fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff f963 	bl	80006c8 <HAL_GetTick>
 8001402:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	e00a      	b.n	800141e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001408:	f7ff f95e 	bl	80006c8 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d902      	bls.n	800141e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	f000 bd66 	b.w	8001eea <HAL_RCC_OscConfig+0x103a>
 800141e:	2302      	movs	r3, #2
 8001420:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001424:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001428:	fa93 f3a3 	rbit	r3, r3
 800142c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001430:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001434:	fab3 f383 	clz	r3, r3
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b3f      	cmp	r3, #63	@ 0x3f
 800143c:	d802      	bhi.n	8001444 <HAL_RCC_OscConfig+0x594>
 800143e:	4b2f      	ldr	r3, [pc, #188]	@ (80014fc <HAL_RCC_OscConfig+0x64c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	e013      	b.n	800146c <HAL_RCC_OscConfig+0x5bc>
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800144e:	fa93 f3a3 	rbit	r3, r3
 8001452:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800145c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001460:	fa93 f3a3 	rbit	r3, r3
 8001464:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001468:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <HAL_RCC_OscConfig+0x64c>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146c:	2202      	movs	r2, #2
 800146e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001472:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001476:	fa92 f2a2 	rbit	r2, r2
 800147a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800147e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001482:	fab2 f282 	clz	r2, r2
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	f042 0220 	orr.w	r2, r2, #32
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	f002 021f 	and.w	r2, r2, #31
 8001492:	2101      	movs	r1, #1
 8001494:	fa01 f202 	lsl.w	r2, r1, r2
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1b4      	bne.n	8001408 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8119 	beq.w	80016e6 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 8082 	beq.w	80015ca <HAL_RCC_OscConfig+0x71a>
 80014c6:	2301      	movs	r3, #1
 80014c8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014d0:	fa93 f3a3 	rbit	r3, r3
 80014d4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80014d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014dc:	fab3 f383 	clz	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_RCC_OscConfig+0x650>)
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	461a      	mov	r2, r3
 80014ec:	2301      	movs	r3, #1
 80014ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff f8ea 	bl	80006c8 <HAL_GetTick>
 80014f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f8:	e00f      	b.n	800151a <HAL_RCC_OscConfig+0x66a>
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff f8e0 	bl	80006c8 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d902      	bls.n	800151a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	f000 bce8 	b.w	8001eea <HAL_RCC_OscConfig+0x103a>
 800151a:	2302      	movs	r3, #2
 800151c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001524:	fa93 f2a3 	rbit	r2, r3
 8001528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001536:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800153a:	2202      	movs	r2, #2
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fa93 f2a3 	rbit	r2, r3
 800154c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800155a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800155e:	2202      	movs	r2, #2
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001566:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	fa93 f2a3 	rbit	r2, r3
 8001570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001574:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001578:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	4bb0      	ldr	r3, [pc, #704]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 800157c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800157e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001582:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001586:	2102      	movs	r1, #2
 8001588:	6019      	str	r1, [r3, #0]
 800158a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800158e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fa93 f1a3 	rbit	r1, r3
 8001598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800159c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80015a0:	6019      	str	r1, [r3, #0]
  return result;
 80015a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015a6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	fab3 f383 	clz	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f003 031f 	and.w	r3, r3, #31
 80015bc:	2101      	movs	r1, #1
 80015be:	fa01 f303 	lsl.w	r3, r1, r3
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d09d      	beq.n	8001504 <HAL_RCC_OscConfig+0x654>
 80015c8:	e08d      	b.n	80016e6 <HAL_RCC_OscConfig+0x836>
 80015ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fa93 f2a3 	rbit	r2, r3
 80015e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015ec:	601a      	str	r2, [r3, #0]
  return result;
 80015ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015f6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f8:	fab3 f383 	clz	r3, r3
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	4b8f      	ldr	r3, [pc, #572]	@ (8001840 <HAL_RCC_OscConfig+0x990>)
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	461a      	mov	r2, r3
 8001608:	2300      	movs	r3, #0
 800160a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160c:	f7ff f85c 	bl	80006c8 <HAL_GetTick>
 8001610:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001616:	f7ff f857 	bl	80006c8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d902      	bls.n	800162c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	f000 bc5f 	b.w	8001eea <HAL_RCC_OscConfig+0x103a>
 800162c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001630:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001634:	2202      	movs	r2, #2
 8001636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800163c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	fa93 f2a3 	rbit	r2, r3
 8001646:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800164a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001654:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001658:	2202      	movs	r2, #2
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001660:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fa93 f2a3 	rbit	r2, r3
 800166a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800166e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001678:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800167c:	2202      	movs	r2, #2
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001684:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	fa93 f2a3 	rbit	r2, r3
 800168e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001692:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001696:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001698:	4b68      	ldr	r3, [pc, #416]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 800169a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800169c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80016a4:	2102      	movs	r1, #2
 80016a6:	6019      	str	r1, [r3, #0]
 80016a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	fa93 f1a3 	rbit	r1, r3
 80016b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ba:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016be:	6019      	str	r1, [r3, #0]
  return result;
 80016c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fab3 f383 	clz	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2101      	movs	r1, #1
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d197      	bne.n	8001616 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 819c 	beq.w	8001a34 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001702:	4b4e      	ldr	r3, [pc, #312]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d116      	bne.n	800173c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b4b      	ldr	r3, [pc, #300]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a4a      	ldr	r2, [pc, #296]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001718:	61d3      	str	r3, [r2, #28]
 800171a:	4b48      	ldr	r3, [pc, #288]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001726:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001730:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001734:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001736:	2301      	movs	r3, #1
 8001738:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	4b41      	ldr	r3, [pc, #260]	@ (8001844 <HAL_RCC_OscConfig+0x994>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d11a      	bne.n	800177e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001748:	4b3e      	ldr	r3, [pc, #248]	@ (8001844 <HAL_RCC_OscConfig+0x994>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a3d      	ldr	r2, [pc, #244]	@ (8001844 <HAL_RCC_OscConfig+0x994>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001752:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001754:	f7fe ffb8 	bl	80006c8 <HAL_GetTick>
 8001758:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175c:	e009      	b.n	8001772 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175e:	f7fe ffb3 	bl	80006c8 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	@ 0x64
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e3bb      	b.n	8001eea <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001772:	4b34      	ldr	r3, [pc, #208]	@ (8001844 <HAL_RCC_OscConfig+0x994>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0ef      	beq.n	800175e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001782:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d106      	bne.n	800179c <HAL_RCC_OscConfig+0x8ec>
 800178e:	4b2b      	ldr	r3, [pc, #172]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a2a      	ldr	r2, [pc, #168]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6213      	str	r3, [r2, #32]
 800179a:	e035      	b.n	8001808 <HAL_RCC_OscConfig+0x958>
 800179c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10c      	bne.n	80017c6 <HAL_RCC_OscConfig+0x916>
 80017ac:	4b23      	ldr	r3, [pc, #140]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4a22      	ldr	r2, [pc, #136]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	6213      	str	r3, [r2, #32]
 80017b8:	4b20      	ldr	r3, [pc, #128]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4a1f      	ldr	r2, [pc, #124]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 80017be:	f023 0304 	bic.w	r3, r3, #4
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	e020      	b.n	8001808 <HAL_RCC_OscConfig+0x958>
 80017c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b05      	cmp	r3, #5
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x940>
 80017d6:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4a18      	ldr	r2, [pc, #96]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	6213      	str	r3, [r2, #32]
 80017e2:	4b16      	ldr	r3, [pc, #88]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4a15      	ldr	r2, [pc, #84]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6213      	str	r3, [r2, #32]
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0x958>
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4a11      	ldr	r2, [pc, #68]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	6213      	str	r3, [r2, #32]
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4a0e      	ldr	r2, [pc, #56]	@ (800183c <HAL_RCC_OscConfig+0x98c>)
 8001802:	f023 0304 	bic.w	r3, r3, #4
 8001806:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001808:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800180c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 8085 	beq.w	8001924 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181a:	f7fe ff55 	bl	80006c8 <HAL_GetTick>
 800181e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001822:	e011      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001824:	f7fe ff50 	bl	80006c8 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d907      	bls.n	8001848 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e356      	b.n	8001eea <HAL_RCC_OscConfig+0x103a>
 800183c:	40021000 	.word	0x40021000
 8001840:	10908120 	.word	0x10908120
 8001844:	40007000 	.word	0x40007000
 8001848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001850:	2202      	movs	r2, #2
 8001852:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001858:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	fa93 f2a3 	rbit	r2, r3
 8001862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001866:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001870:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001874:	2202      	movs	r2, #2
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800187c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	fa93 f2a3 	rbit	r2, r3
 8001886:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800188e:	601a      	str	r2, [r3, #0]
  return result;
 8001890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001894:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001898:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189a:	fab3 f383 	clz	r3, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <HAL_RCC_OscConfig+0xa00>
 80018aa:	4b98      	ldr	r3, [pc, #608]	@ (8001b0c <HAL_RCC_OscConfig+0xc5c>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	e013      	b.n	80018d8 <HAL_RCC_OscConfig+0xa28>
 80018b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80018b8:	2202      	movs	r2, #2
 80018ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ce:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	4b8d      	ldr	r3, [pc, #564]	@ (8001b0c <HAL_RCC_OscConfig+0xc5c>)
 80018d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018dc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80018e0:	2102      	movs	r1, #2
 80018e2:	6011      	str	r1, [r2, #0]
 80018e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018e8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	fa92 f1a2 	rbit	r1, r2
 80018f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018f6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80018fa:	6011      	str	r1, [r2, #0]
  return result;
 80018fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001900:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	fab2 f282 	clz	r2, r2
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	f002 021f 	and.w	r2, r2, #31
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f202 	lsl.w	r2, r1, r2
 800191c:	4013      	ands	r3, r2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d080      	beq.n	8001824 <HAL_RCC_OscConfig+0x974>
 8001922:	e07d      	b.n	8001a20 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7fe fed0 	bl	80006c8 <HAL_GetTick>
 8001928:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192c:	e00b      	b.n	8001946 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7fe fecb 	bl	80006c8 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e2d1      	b.n	8001eea <HAL_RCC_OscConfig+0x103a>
 8001946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800194e:	2202      	movs	r2, #2
 8001950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001956:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fa93 f2a3 	rbit	r2, r3
 8001960:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001964:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001972:	2202      	movs	r2, #2
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800197a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fa93 f2a3 	rbit	r2, r3
 8001984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001988:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800198c:	601a      	str	r2, [r3, #0]
  return result;
 800198e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001992:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001996:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <HAL_RCC_OscConfig+0xafe>
 80019a8:	4b58      	ldr	r3, [pc, #352]	@ (8001b0c <HAL_RCC_OscConfig+0xc5c>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	e013      	b.n	80019d6 <HAL_RCC_OscConfig+0xb26>
 80019ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80019b6:	2202      	movs	r2, #2
 80019b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019be:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	fa93 f2a3 	rbit	r2, r3
 80019c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019cc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	4b4e      	ldr	r3, [pc, #312]	@ (8001b0c <HAL_RCC_OscConfig+0xc5c>)
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019da:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80019de:	2102      	movs	r1, #2
 80019e0:	6011      	str	r1, [r2, #0]
 80019e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019e6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	fa92 f1a2 	rbit	r1, r2
 80019f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019f4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80019f8:	6011      	str	r1, [r2, #0]
  return result;
 80019fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019fe:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	fab2 f282 	clz	r2, r2
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	f002 021f 	and.w	r2, r2, #31
 8001a14:	2101      	movs	r1, #1
 8001a16:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d186      	bne.n	800192e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a20:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a28:	4b38      	ldr	r3, [pc, #224]	@ (8001b0c <HAL_RCC_OscConfig+0xc5c>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	4a37      	ldr	r2, [pc, #220]	@ (8001b0c <HAL_RCC_OscConfig+0xc5c>)
 8001a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8251 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a46:	4b31      	ldr	r3, [pc, #196]	@ (8001b0c <HAL_RCC_OscConfig+0xc5c>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	f000 820f 	beq.w	8001e72 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	f040 8165 	bne.w	8001d30 <HAL_RCC_OscConfig+0xe80>
 8001a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a78:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a86:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a8a:	601a      	str	r2, [r3, #0]
  return result;
 8001a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a90:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001aa0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7fe fe0c 	bl	80006c8 <HAL_GetTick>
 8001ab0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab4:	e009      	b.n	8001aca <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7fe fe07 	bl	80006c8 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e20f      	b.n	8001eea <HAL_RCC_OscConfig+0x103a>
 8001aca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ace:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001ad2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001adc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	fa93 f2a3 	rbit	r2, r3
 8001ae6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aea:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001aee:	601a      	str	r2, [r3, #0]
  return result;
 8001af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001af8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b02:	d805      	bhi.n	8001b10 <HAL_RCC_OscConfig+0xc60>
 8001b04:	4b01      	ldr	r3, [pc, #4]	@ (8001b0c <HAL_RCC_OscConfig+0xc5c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	e02a      	b.n	8001b60 <HAL_RCC_OscConfig+0xcb0>
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b14:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001b18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b22:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fa93 f2a3 	rbit	r2, r3
 8001b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b30:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b48:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	fa93 f2a3 	rbit	r2, r3
 8001b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b56:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	4bca      	ldr	r3, [pc, #808]	@ (8001e88 <HAL_RCC_OscConfig+0xfd8>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b64:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001b68:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b6c:	6011      	str	r1, [r2, #0]
 8001b6e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b72:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	fa92 f1a2 	rbit	r1, r2
 8001b7c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b80:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001b84:	6011      	str	r1, [r2, #0]
  return result;
 8001b86:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b8a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	fab2 f282 	clz	r2, r2
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	f042 0220 	orr.w	r2, r2, #32
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	f002 021f 	and.w	r2, r2, #31
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d184      	bne.n	8001ab6 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bac:	4bb6      	ldr	r3, [pc, #728]	@ (8001e88 <HAL_RCC_OscConfig+0xfd8>)
 8001bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb0:	f023 020f 	bic.w	r2, r3, #15
 8001bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc0:	49b1      	ldr	r1, [pc, #708]	@ (8001e88 <HAL_RCC_OscConfig+0xfd8>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001bc6:	4bb0      	ldr	r3, [pc, #704]	@ (8001e88 <HAL_RCC_OscConfig+0xfd8>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a19      	ldr	r1, [r3, #32]
 8001bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bde:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	430b      	orrs	r3, r1
 8001be8:	49a7      	ldr	r1, [pc, #668]	@ (8001e88 <HAL_RCC_OscConfig+0xfd8>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	604b      	str	r3, [r1, #4]
 8001bee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001bf6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c00:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	fa93 f2a3 	rbit	r2, r3
 8001c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c0e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001c12:	601a      	str	r2, [r3, #0]
  return result;
 8001c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c18:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001c1c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c28:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2301      	movs	r3, #1
 8001c32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7fe fd48 	bl	80006c8 <HAL_GetTick>
 8001c38:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c3c:	e009      	b.n	8001c52 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7fe fd43 	bl	80006c8 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e14b      	b.n	8001eea <HAL_RCC_OscConfig+0x103a>
 8001c52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c56:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001c5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c64:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fa93 f2a3 	rbit	r2, r3
 8001c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c72:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001c76:	601a      	str	r2, [r3, #0]
  return result;
 8001c78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001c80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c8a:	d802      	bhi.n	8001c92 <HAL_RCC_OscConfig+0xde2>
 8001c8c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e88 <HAL_RCC_OscConfig+0xfd8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	e027      	b.n	8001ce2 <HAL_RCC_OscConfig+0xe32>
 8001c92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c96:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cbc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001cc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cca:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	fa93 f2a3 	rbit	r2, r3
 8001cd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	4b6a      	ldr	r3, [pc, #424]	@ (8001e88 <HAL_RCC_OscConfig+0xfd8>)
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ce6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001cea:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cee:	6011      	str	r1, [r2, #0]
 8001cf0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cf4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	fa92 f1a2 	rbit	r1, r2
 8001cfe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d02:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001d06:	6011      	str	r1, [r2, #0]
  return result;
 8001d08:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d0c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	fab2 f282 	clz	r2, r2
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	f042 0220 	orr.w	r2, r2, #32
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	f002 021f 	and.w	r2, r2, #31
 8001d22:	2101      	movs	r1, #1
 8001d24:	fa01 f202 	lsl.w	r2, r1, r2
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d087      	beq.n	8001c3e <HAL_RCC_OscConfig+0xd8e>
 8001d2e:	e0db      	b.n	8001ee8 <HAL_RCC_OscConfig+0x1038>
 8001d30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d34:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001d38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d42:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	fa93 f2a3 	rbit	r2, r3
 8001d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d50:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d54:	601a      	str	r2, [r3, #0]
  return result;
 8001d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d5e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d6a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	461a      	mov	r2, r3
 8001d72:	2300      	movs	r3, #0
 8001d74:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7fe fca7 	bl	80006c8 <HAL_GetTick>
 8001d7a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7e:	e009      	b.n	8001d94 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d80:	f7fe fca2 	bl	80006c8 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e0aa      	b.n	8001eea <HAL_RCC_OscConfig+0x103a>
 8001d94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d98:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	fa93 f2a3 	rbit	r2, r3
 8001db0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001db8:	601a      	str	r2, [r3, #0]
  return result;
 8001dba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dbe:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001dc2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dcc:	d802      	bhi.n	8001dd4 <HAL_RCC_OscConfig+0xf24>
 8001dce:	4b2e      	ldr	r3, [pc, #184]	@ (8001e88 <HAL_RCC_OscConfig+0xfd8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	e027      	b.n	8001e24 <HAL_RCC_OscConfig+0xf74>
 8001dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001ddc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	fa93 f2a3 	rbit	r2, r3
 8001df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dfe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001e02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	fa93 f2a3 	rbit	r2, r3
 8001e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <HAL_RCC_OscConfig+0xfd8>)
 8001e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e24:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e28:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001e2c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e30:	6011      	str	r1, [r2, #0]
 8001e32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e36:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	fa92 f1a2 	rbit	r1, r2
 8001e40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e44:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001e48:	6011      	str	r1, [r2, #0]
  return result;
 8001e4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e4e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	fab2 f282 	clz	r2, r2
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	f042 0220 	orr.w	r2, r2, #32
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	f002 021f 	and.w	r2, r2, #31
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d187      	bne.n	8001d80 <HAL_RCC_OscConfig+0xed0>
 8001e70:	e03a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d104      	bne.n	8001e8c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e031      	b.n	8001eea <HAL_RCC_OscConfig+0x103a>
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <HAL_RCC_OscConfig+0x1044>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001e94:	4b17      	ldr	r3, [pc, #92]	@ (8001ef4 <HAL_RCC_OscConfig+0x1044>)
 8001e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e98:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ea0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001ea4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d117      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001eb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001eb8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ebc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d10b      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b09e      	sub	sp, #120	@ 0x78
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e154      	b.n	80021ba <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f10:	4b89      	ldr	r3, [pc, #548]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d910      	bls.n	8001f40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b86      	ldr	r3, [pc, #536]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 0207 	bic.w	r2, r3, #7
 8001f26:	4984      	ldr	r1, [pc, #528]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b82      	ldr	r3, [pc, #520]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e13c      	b.n	80021ba <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4c:	4b7b      	ldr	r3, [pc, #492]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4978      	ldr	r1, [pc, #480]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80cd 	beq.w	8002106 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d137      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xec>
 8001f74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f78:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001f82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f8c:	d802      	bhi.n	8001f94 <HAL_RCC_ClockConfig+0x9c>
 8001f8e:	4b6b      	ldr	r3, [pc, #428]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	e00f      	b.n	8001fb4 <HAL_RCC_ClockConfig+0xbc>
 8001f94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	667b      	str	r3, [r7, #100]	@ 0x64
 8001fa2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001fb0:	4b62      	ldr	r3, [pc, #392]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001fba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001fbc:	fa92 f2a2 	rbit	r2, r2
 8001fc0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001fc2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001fc4:	fab2 f282 	clz	r2, r2
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	f042 0220 	orr.w	r2, r2, #32
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	f002 021f 	and.w	r2, r2, #31
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d171      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0ea      	b.n	80021ba <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d137      	bne.n	800205c <HAL_RCC_ClockConfig+0x164>
 8001fec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ff0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b3f      	cmp	r3, #63	@ 0x3f
 8002004:	d802      	bhi.n	800200c <HAL_RCC_ClockConfig+0x114>
 8002006:	4b4d      	ldr	r3, [pc, #308]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	e00f      	b.n	800202c <HAL_RCC_ClockConfig+0x134>
 800200c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002010:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	647b      	str	r3, [r7, #68]	@ 0x44
 800201a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800201e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002028:	4b44      	ldr	r3, [pc, #272]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002030:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002032:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002034:	fa92 f2a2 	rbit	r2, r2
 8002038:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800203a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800203c:	fab2 f282 	clz	r2, r2
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f042 0220 	orr.w	r2, r2, #32
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	f002 021f 	and.w	r2, r2, #31
 800204c:	2101      	movs	r1, #1
 800204e:	fa01 f202 	lsl.w	r2, r1, r2
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d135      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0ae      	b.n	80021ba <HAL_RCC_ClockConfig+0x2c2>
 800205c:	2302      	movs	r3, #2
 800205e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b3f      	cmp	r3, #63	@ 0x3f
 8002072:	d802      	bhi.n	800207a <HAL_RCC_ClockConfig+0x182>
 8002074:	4b31      	ldr	r3, [pc, #196]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	e00d      	b.n	8002096 <HAL_RCC_ClockConfig+0x19e>
 800207a:	2302      	movs	r3, #2
 800207c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
 8002086:	2302      	movs	r3, #2
 8002088:	623b      	str	r3, [r7, #32]
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	fa93 f3a3 	rbit	r3, r3
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	4b2a      	ldr	r3, [pc, #168]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	2202      	movs	r2, #2
 8002098:	61ba      	str	r2, [r7, #24]
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	fa92 f2a2 	rbit	r2, r2
 80020a0:	617a      	str	r2, [r7, #20]
  return result;
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	fab2 f282 	clz	r2, r2
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	f042 0220 	orr.w	r2, r2, #32
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	f002 021f 	and.w	r2, r2, #31
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e07a      	b.n	80021ba <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c4:	4b1d      	ldr	r3, [pc, #116]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f023 0203 	bic.w	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	491a      	ldr	r1, [pc, #104]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d6:	f7fe faf7 	bl	80006c8 <HAL_GetTick>
 80020da:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020de:	f7fe faf3 	bl	80006c8 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e062      	b.n	80021ba <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f4:	4b11      	ldr	r3, [pc, #68]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 020c 	and.w	r2, r3, #12
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	429a      	cmp	r2, r3
 8002104:	d1eb      	bne.n	80020de <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002106:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d215      	bcs.n	8002140 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002114:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 0207 	bic.w	r2, r3, #7
 800211c:	4906      	ldr	r1, [pc, #24]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d006      	beq.n	8002140 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e041      	b.n	80021ba <HAL_RCC_ClockConfig+0x2c2>
 8002136:	bf00      	nop
 8002138:	40022000 	.word	0x40022000
 800213c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800214c:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <HAL_RCC_ClockConfig+0x2cc>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	491a      	ldr	r1, [pc, #104]	@ (80021c4 <HAL_RCC_ClockConfig+0x2cc>)
 800215a:	4313      	orrs	r3, r2
 800215c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800216a:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <HAL_RCC_ClockConfig+0x2cc>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4912      	ldr	r1, [pc, #72]	@ (80021c4 <HAL_RCC_ClockConfig+0x2cc>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800217e:	f000 f829 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8002182:	4601      	mov	r1, r0
 8002184:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <HAL_RCC_ClockConfig+0x2cc>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800218c:	22f0      	movs	r2, #240	@ 0xf0
 800218e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	fa92 f2a2 	rbit	r2, r2
 8002196:	60fa      	str	r2, [r7, #12]
  return result;
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	fab2 f282 	clz	r2, r2
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	40d3      	lsrs	r3, r2
 80021a2:	4a09      	ldr	r2, [pc, #36]	@ (80021c8 <HAL_RCC_ClockConfig+0x2d0>)
 80021a4:	5cd3      	ldrb	r3, [r2, r3]
 80021a6:	fa21 f303 	lsr.w	r3, r1, r3
 80021aa:	4a08      	ldr	r2, [pc, #32]	@ (80021cc <HAL_RCC_ClockConfig+0x2d4>)
 80021ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021ae:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <HAL_RCC_ClockConfig+0x2d8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fa44 	bl	8000640 <HAL_InitTick>
  
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3778      	adds	r7, #120	@ 0x78
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08037420 	.word	0x08037420
 80021cc:	20000004 	.word	0x20000004
 80021d0:	20000008 	.word	0x20000008

080021d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80021ee:	4b1f      	ldr	r3, [pc, #124]	@ (800226c <HAL_RCC_GetSysClockFreq+0x98>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d002      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0x30>
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d003      	beq.n	800220a <HAL_RCC_GetSysClockFreq+0x36>
 8002202:	e029      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002204:	4b1a      	ldr	r3, [pc, #104]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002206:	613b      	str	r3, [r7, #16]
      break;
 8002208:	e029      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	0c9b      	lsrs	r3, r3, #18
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	4a18      	ldr	r2, [pc, #96]	@ (8002274 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002218:	4b14      	ldr	r3, [pc, #80]	@ (800226c <HAL_RCC_GetSysClockFreq+0x98>)
 800221a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	4a15      	ldr	r2, [pc, #84]	@ (8002278 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002230:	4a0f      	ldr	r2, [pc, #60]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	fbb2 f2f3 	udiv	r2, r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e007      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002242:	4a0b      	ldr	r2, [pc, #44]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	fbb2 f2f3 	udiv	r2, r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	613b      	str	r3, [r7, #16]
      break;
 8002256:	e002      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x9c>)
 800225a:	613b      	str	r3, [r7, #16]
      break;
 800225c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225e:	693b      	ldr	r3, [r7, #16]
}
 8002260:	4618      	mov	r0, r3
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40021000 	.word	0x40021000
 8002270:	007a1200 	.word	0x007a1200
 8002274:	08037430 	.word	0x08037430
 8002278:	08037440 	.word	0x08037440

0800227c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e049      	b.n	8002322 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe f916 	bl	80004d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3304      	adds	r3, #4
 80022b8:	4619      	mov	r1, r3
 80022ba:	4610      	mov	r0, r2
 80022bc:	f000 f9d0 	bl	8002660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d001      	beq.n	8002344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e04f      	b.n	80023e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a23      	ldr	r2, [pc, #140]	@ (80023f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01d      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x76>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800236e:	d018      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x76>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1f      	ldr	r2, [pc, #124]	@ (80023f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x76>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a1e      	ldr	r2, [pc, #120]	@ (80023f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d00e      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x76>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1c      	ldr	r2, [pc, #112]	@ (80023fc <HAL_TIM_Base_Start_IT+0xd0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d009      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x76>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1b      	ldr	r2, [pc, #108]	@ (8002400 <HAL_TIM_Base_Start_IT+0xd4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d004      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x76>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a19      	ldr	r2, [pc, #100]	@ (8002404 <HAL_TIM_Base_Start_IT+0xd8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d115      	bne.n	80023ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	4b17      	ldr	r3, [pc, #92]	@ (8002408 <HAL_TIM_Base_Start_IT+0xdc>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b06      	cmp	r3, #6
 80023b2:	d015      	beq.n	80023e0 <HAL_TIM_Base_Start_IT+0xb4>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023ba:	d011      	beq.n	80023e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023cc:	e008      	b.n	80023e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0201 	orr.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e000      	b.n	80023e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	40012c00 	.word	0x40012c00
 80023f4:	40000400 	.word	0x40000400
 80023f8:	40000800 	.word	0x40000800
 80023fc:	40013400 	.word	0x40013400
 8002400:	40014000 	.word	0x40014000
 8002404:	40015000 	.word	0x40015000
 8002408:	00010007 	.word	0x00010007

0800240c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d020      	beq.n	8002470 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01b      	beq.n	8002470 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0202 	mvn.w	r2, #2
 8002440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f8e4 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8d6 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f8e7 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d020      	beq.n	80024bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0204 	mvn.w	r2, #4
 800248c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2202      	movs	r2, #2
 8002492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f8be 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 80024a8:	e005      	b.n	80024b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f8b0 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f8c1 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d020      	beq.n	8002508 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01b      	beq.n	8002508 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0208 	mvn.w	r2, #8
 80024d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2204      	movs	r2, #4
 80024de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f898 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f88a 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f89b 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b00      	cmp	r3, #0
 8002510:	d020      	beq.n	8002554 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01b      	beq.n	8002554 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0210 	mvn.w	r2, #16
 8002524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2208      	movs	r2, #8
 800252a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f872 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 8002540:	e005      	b.n	800254e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f864 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f875 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0201 	mvn.w	r2, #1
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fd fe2e 	bl	80001d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00c      	beq.n	800259c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f916 	bl	80027c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00c      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80025b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f90e 	bl	80027dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00c      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f834 	bl	800264c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00c      	beq.n	8002608 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0220 	mvn.w	r2, #32
 8002600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8d6 	bl	80027b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a48      	ldr	r2, [pc, #288]	@ (8002794 <TIM_Base_SetConfig+0x134>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d013      	beq.n	80026a0 <TIM_Base_SetConfig+0x40>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800267e:	d00f      	beq.n	80026a0 <TIM_Base_SetConfig+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a45      	ldr	r2, [pc, #276]	@ (8002798 <TIM_Base_SetConfig+0x138>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00b      	beq.n	80026a0 <TIM_Base_SetConfig+0x40>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a44      	ldr	r2, [pc, #272]	@ (800279c <TIM_Base_SetConfig+0x13c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d007      	beq.n	80026a0 <TIM_Base_SetConfig+0x40>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a43      	ldr	r2, [pc, #268]	@ (80027a0 <TIM_Base_SetConfig+0x140>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d003      	beq.n	80026a0 <TIM_Base_SetConfig+0x40>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a42      	ldr	r2, [pc, #264]	@ (80027a4 <TIM_Base_SetConfig+0x144>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d108      	bne.n	80026b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a37      	ldr	r2, [pc, #220]	@ (8002794 <TIM_Base_SetConfig+0x134>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01f      	beq.n	80026fa <TIM_Base_SetConfig+0x9a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026c0:	d01b      	beq.n	80026fa <TIM_Base_SetConfig+0x9a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a34      	ldr	r2, [pc, #208]	@ (8002798 <TIM_Base_SetConfig+0x138>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d017      	beq.n	80026fa <TIM_Base_SetConfig+0x9a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a33      	ldr	r2, [pc, #204]	@ (800279c <TIM_Base_SetConfig+0x13c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <TIM_Base_SetConfig+0x9a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a32      	ldr	r2, [pc, #200]	@ (80027a0 <TIM_Base_SetConfig+0x140>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00f      	beq.n	80026fa <TIM_Base_SetConfig+0x9a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a32      	ldr	r2, [pc, #200]	@ (80027a8 <TIM_Base_SetConfig+0x148>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00b      	beq.n	80026fa <TIM_Base_SetConfig+0x9a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a31      	ldr	r2, [pc, #196]	@ (80027ac <TIM_Base_SetConfig+0x14c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d007      	beq.n	80026fa <TIM_Base_SetConfig+0x9a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a30      	ldr	r2, [pc, #192]	@ (80027b0 <TIM_Base_SetConfig+0x150>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d003      	beq.n	80026fa <TIM_Base_SetConfig+0x9a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a2b      	ldr	r2, [pc, #172]	@ (80027a4 <TIM_Base_SetConfig+0x144>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d108      	bne.n	800270c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a18      	ldr	r2, [pc, #96]	@ (8002794 <TIM_Base_SetConfig+0x134>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d013      	beq.n	8002760 <TIM_Base_SetConfig+0x100>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a19      	ldr	r2, [pc, #100]	@ (80027a0 <TIM_Base_SetConfig+0x140>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00f      	beq.n	8002760 <TIM_Base_SetConfig+0x100>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a19      	ldr	r2, [pc, #100]	@ (80027a8 <TIM_Base_SetConfig+0x148>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00b      	beq.n	8002760 <TIM_Base_SetConfig+0x100>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a18      	ldr	r2, [pc, #96]	@ (80027ac <TIM_Base_SetConfig+0x14c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d007      	beq.n	8002760 <TIM_Base_SetConfig+0x100>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a17      	ldr	r2, [pc, #92]	@ (80027b0 <TIM_Base_SetConfig+0x150>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d003      	beq.n	8002760 <TIM_Base_SetConfig+0x100>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a12      	ldr	r2, [pc, #72]	@ (80027a4 <TIM_Base_SetConfig+0x144>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d103      	bne.n	8002768 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b01      	cmp	r3, #1
 8002778:	d105      	bne.n	8002786 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f023 0201 	bic.w	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	611a      	str	r2, [r3, #16]
  }
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40012c00 	.word	0x40012c00
 8002798:	40000400 	.word	0x40000400
 800279c:	40000800 	.word	0x40000800
 80027a0:	40013400 	.word	0x40013400
 80027a4:	40015000 	.word	0x40015000
 80027a8:	40014000 	.word	0x40014000
 80027ac:	40014400 	.word	0x40014400
 80027b0:	40014800 	.word	0x40014800

080027b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <memset>:
 80027f0:	4402      	add	r2, r0
 80027f2:	4603      	mov	r3, r0
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d100      	bne.n	80027fa <memset+0xa>
 80027f8:	4770      	bx	lr
 80027fa:	f803 1b01 	strb.w	r1, [r3], #1
 80027fe:	e7f9      	b.n	80027f4 <memset+0x4>

08002800 <__libc_init_array>:
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	4d0d      	ldr	r5, [pc, #52]	@ (8002838 <__libc_init_array+0x38>)
 8002804:	4c0d      	ldr	r4, [pc, #52]	@ (800283c <__libc_init_array+0x3c>)
 8002806:	1b64      	subs	r4, r4, r5
 8002808:	10a4      	asrs	r4, r4, #2
 800280a:	2600      	movs	r6, #0
 800280c:	42a6      	cmp	r6, r4
 800280e:	d109      	bne.n	8002824 <__libc_init_array+0x24>
 8002810:	4d0b      	ldr	r5, [pc, #44]	@ (8002840 <__libc_init_array+0x40>)
 8002812:	4c0c      	ldr	r4, [pc, #48]	@ (8002844 <__libc_init_array+0x44>)
 8002814:	f000 f818 	bl	8002848 <_init>
 8002818:	1b64      	subs	r4, r4, r5
 800281a:	10a4      	asrs	r4, r4, #2
 800281c:	2600      	movs	r6, #0
 800281e:	42a6      	cmp	r6, r4
 8002820:	d105      	bne.n	800282e <__libc_init_array+0x2e>
 8002822:	bd70      	pop	{r4, r5, r6, pc}
 8002824:	f855 3b04 	ldr.w	r3, [r5], #4
 8002828:	4798      	blx	r3
 800282a:	3601      	adds	r6, #1
 800282c:	e7ee      	b.n	800280c <__libc_init_array+0xc>
 800282e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002832:	4798      	blx	r3
 8002834:	3601      	adds	r6, #1
 8002836:	e7f2      	b.n	800281e <__libc_init_array+0x1e>
 8002838:	08037450 	.word	0x08037450
 800283c:	08037450 	.word	0x08037450
 8002840:	08037450 	.word	0x08037450
 8002844:	08037454 	.word	0x08037454

08002848 <_init>:
 8002848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284a:	bf00      	nop
 800284c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284e:	bc08      	pop	{r3}
 8002850:	469e      	mov	lr, r3
 8002852:	4770      	bx	lr

08002854 <_fini>:
 8002854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002856:	bf00      	nop
 8002858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285a:	bc08      	pop	{r3}
 800285c:	469e      	mov	lr, r3
 800285e:	4770      	bx	lr
